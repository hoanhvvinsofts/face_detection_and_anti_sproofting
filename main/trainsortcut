Timer unit: 1e-07 s

Total time: 14.58 s
File: stream_test.py
Function: stream at line 119

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   119                                           def stream():
   120                                               # Initialize some useful arguments
   121         1         33.0     33.0      0.0      cosine_threshold = 0.8
   122         1         24.0     24.0      0.0      proba_threshold = 0.85
   123         1         21.0     21.0      0.0      comparing_num = 5
   124         1         21.0     21.0      0.0      trackers = []
   125         1         21.0     21.0      0.0      texts = []
   126         1         21.0     21.0      0.0      fake_ckeck = []
   127         1         21.0     21.0      0.0      frames = 0
   128
   129         1         20.0     20.0      0.0      fps_prev_frame = 0
   130         1         20.0     20.0      0.0      fps_new_frame = 0
   131
   132                                               # Start streaming and recording
   133         1   75226131.0 75226131.0     51.6      cap = cv2.VideoCapture(0)
   134         1        148.0    148.0      0.0      frame_width = int(cap.get(3))
   135         1         30.0     30.0      0.0      frame_height = int(cap.get(4))
   136         1         21.0     21.0      0.0      save_width = 600
   137         1         43.0     43.0      0.0      save_height = int(600/frame_width*frame_height)
   138         1         20.0     20.0      0.0      frame_count = 0
   139
   140         1         21.0     21.0      0.0      while True:
   141         6   13439817.0 2239969.5      9.2          ret, frame = cap.read()
   142         6        419.0     69.8      0.0          frames += 1
   143                                                   # rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
   144         6      34500.0   5750.0      0.0          frame = cv2.resize(frame, (save_width, save_height))
   145         6        546.0     91.0      0.0          fps_new_frame = time.time()
   146
   147                                                   # Save 5 frame if press "a" button
   148         6    2371086.0 395181.0      1.6          if cv2.waitKey(33) == ord('a'):
   149                                                       frame_count = 1
   150                                                       print(">> Order received, save 10 frame to datasets/unlabel/unknow")
   151                                                       _thread.start_new_thread(import_label_and_move_to_train_dir, ())
   152
   153         6        681.0    113.5      0.0          if frames%3 == 0:
   154         2        105.0     52.5      0.0              trackers = []
   155         2         81.0     40.5      0.0              texts = []
   156         2        100.0     50.0      0.0              fake_ckeck = []
   157
   158                                                       # bbox_start = time.time()                    #TIME
   159                                                       # bboxes = detector.detect_faces(frame)
   160         2   35128949.0 17564474.5     24.1              bboxes, _, landmarks = detector.detect(frame, landmarks=True)
   161                                                       # bbox_end = time.time()                      #TIME
   162                                                       # print("Bbox time cost:", bbox_end-bbox_start)
   163
   164                                                       # if len(bboxes) != 0:
   165         2         87.0     43.5      0.0              if bboxes is not None:
   166
   167                                                           # start = time.time()                               # TIME
   168
   169                                                           # for bboxe in bboxes:
   170         4        334.0     83.5      0.0                  for bboxe, landmark in zip(bboxes, landmarks):
   171                                                               # embedding_start = time.time()                   #TIME
   172         2        208.0    104.0      0.0                      bbox = list(map(int,bboxe.tolist()))
   173         2        138.0     69.0      0.0                      bbox = np.array([bbox[0], bbox[1], bbox[2], bbox[3]])
   174         2         51.0     25.5      0.0                      landmarks = landmark
   175         2        114.0     57.0      0.0                      landmarks = np.array([landmarks[0][0], landmarks[1][0], landmarks[2][0], landmarks[3][0], landmarks[4][0],
   176         2        169.0     84.5      0.0                                          landmarks[0][1], landmarks[1][1], landmarks[2][1], landmarks[3][1], landmarks[4][1]])
   177         2        121.0     60.5      0.0                      landmarks = landmarks.reshape((2,5)).T
   178         2      21277.0  10638.5      0.0                      nimg = face_preprocess.preprocess(frame, bbox, landmarks, image_size='112,112')
   179
   180                                                               # Save image for training
   181         2         92.0     46.0      0.0                      if frame_count > 10:
   182                                                                   frame_count = 0
   183         2         53.0     26.5      0.0                      if frame_count != 0:
   184                                                                   _thread.start_new_thread(check_and_save_image, (nimg, ))
   185                                                                   frame_count += 1
   186
   187         2        613.0    306.5      0.0                      nimg = cv2.cvtColor(nimg, cv2.COLOR_BGR2RGB)
   188         2        289.0    144.5      0.0                      nimg = np.transpose(nimg, (2,0,1))
   189         2    1183360.0 591680.0      0.8                      embedding = embedding_model.get_feature(nimg).reshape(1,-1)
   190                                                               # embedding_end = time.time()                   #TIME
   191                                                               # print("Embedding time cost:", embedding_end-embedding_start)
   192
   193         2        136.0     68.0      0.0                      text = ""
   194
   195                                                               # anti_sproofing_start = time.time()            #TIME
   196         2   10139503.0 5069751.5      7.0                      fake, score = anti_sproofing(frame)
   197                                                               # anti_sproofing_end = time.time()              #TIME
   198                                                               # print("Anti sproffing time cost:", anti_sproofing_end-anti_sproofing_start)
   199         2         76.0     38.0      0.0                      if fake:
   200                                                                   text = "Fake face " + str(round(score, 2))
   201                                                                   fake_ckeck.append(True)
   202                                                                   texts.append(text)
   203
   204                                                               else:
   205                                                                   # Predict class
   206                                                                   # predict_start = time.time()                 #TIME
   207         2    3233771.0 1616885.5      2.2                          preds = model.predict(embedding)
   208         2        281.0    140.5      0.0                          preds = preds.flatten()
   209                                                                   # Get the highest accuracy embedded vector
   210         2        302.0    151.0      0.0                          j = np.argmax(preds)
   211         2        103.0     51.5      0.0                          proba = preds[j]
   212                                                                   # Compare this vector to source class vectors to verify it is actual belong to this class
   213         2        463.0    231.5      0.0                          match_class_idx = (labels == j)
   214         2        140.0     70.0      0.0                          match_class_idx = np.where(match_class_idx)[0]
   215         2       1467.0    733.5      0.0                          selected_idx = np.random.choice(match_class_idx, comparing_num)
   216         2        230.0    115.0      0.0                          compare_embeddings = embeddings[selected_idx]
   217                                                                   # Calculate cosine similarity
   218         2       1966.0    983.0      0.0                          cos_similarity = CosineSimilarity(embedding, compare_embeddings)
   219         2        159.0     79.5      0.0                          if cos_similarity < cosine_threshold and proba > proba_threshold:
   220         2        157.0     78.5      0.0                              name = le.classes_[j]
   221         2        136.0     68.0      0.0                              text = "{}".format(name)
   222
   223                                                                   # predict_end = time.time()                   # TIME
   224                                                                   # print("Predict time cost:", predict_end-predict_start)
   225
   226                                                               # Start tracking
   227         2       3082.0   1541.0      0.0                      tracker = dlib.correlation_tracker()
   228         2        261.0    130.5      0.0                      rect = dlib.rectangle(bbox[0], bbox[1], bbox[2], bbox[3])
   229         2     151229.0  75614.5      0.1                      tracker.start_track(frame, rect)
   230         2        151.0     75.5      0.0                      trackers.append(tracker)
   231         2         51.0     25.5      0.0                      texts.append(text)
   232         2         48.0     24.0      0.0                      fake_ckeck.append(False)
   233
   234         2        226.0    113.0      0.0                      y = bbox[1] - 10 if bbox[1] - 10 > 10 else bbox[1] + 10
   235         2         42.0     21.0      0.0                      if fake:
   236                                                                   cv2.rectangle(frame, (bbox[0], bbox[1]), (bbox[2], bbox[3]), (0, 0, 255), 2)
   237                                                                   cv2.putText(frame, text, (bbox[0], y), cv2.FONT_HERSHEY_SIMPLEX, 0.45, (0, 0, 255), 2)
   238                                                               else:
   239         2        918.0    459.0      0.0                          cv2.rectangle(frame, (bbox[0], bbox[1]), (bbox[2], bbox[3]), (255,255,255), 2)
   240         2        610.0    305.0      0.0                          cv2.putText(frame, text, (bbox[0], y), cv2.FONT_HERSHEY_SIMPLEX, 0.45, (0, 255, 0), 2)
   241
   242                                                           # end = time.time()
   243                                                           # print("Time cost:", end-start)
   244
   245                                                   else:
   246         6        494.0     82.3      0.0              for tracker, text, fake_ in zip(trackers,texts,fake_ckeck):
   247         2        651.0    325.5      0.0                  pos = tracker.get_position()
   248
   249                                                           # unpack the position object
   250         2        193.0     96.5      0.0                  startX = int(pos.left())
   251         2        101.0     50.5      0.0                  startY = int(pos.top())
   252         2        119.0     59.5      0.0                  endX = int(pos.right())
   253         2         92.0     46.0      0.0                  endY = int(pos.bottom())
   254
   255         2         61.0     30.5      0.0                  if fake_ is True:
   256                                                               cv2.rectangle(frame, (startX, startY), (endX, endY), (0,0,255), 1)
   257                                                               cv2.putText(frame, text, (startX, startY - 15), cv2.FONT_HERSHEY_SIMPLEX, 0.45, (0,0,255), 2)
   258                                                           else:
   259         2        569.0    284.5      0.0                      cv2.rectangle(frame, (startX, startY), (endX, endY), (255,255,255), 1)
   260         2        514.0    257.0      0.0                      cv2.putText(frame, text, (startX, startY - 15), cv2.FONT_HERSHEY_SIMPLEX, 0.45, (0, 255, 0), 2)
   261
   262                                                   # Calulate fps
   263         6        292.0     48.7      0.0          fps = 1/(fps_new_frame - fps_prev_frame)
   264         6        169.0     28.2      0.0          fps_prev_frame = fps_new_frame
   265         6       3665.0    610.8      0.0          cv2.putText(frame, str(round(fps, 2)), (5, 25), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
   266
   267         6     375178.0  62529.7      0.3          cv2.imshow("Frame", frame)
   268         6     588542.0  98090.3      0.4          key = cv2.waitKey(1) & 0xFF
   269         6        729.0    121.5      0.0          if key == ord("q"):
   270         1         27.0     27.0      0.0              break
   271
   272         1    3746209.0 3746209.0      2.6      cap.release()
   273         1     137329.0 137329.0      0.1      cv2.destroyAllWindows()